theme_pubclean()
embarkedStruct <- embarkedStruct %>%
arrange(desc(embarked)) %>%
mutate(pos = round(cumsum(embarkedPercentages) - 0.5*embarkedPercentages, digits = 2))
embarkedStruct
embarkedStruct$embarked <- as.factor(embarkedStruct$embarked)
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF", "#868686FF")) +
theme_pubclean()
mycols <- c("#0073C2FF", "#EFC000FF", "#868686FF", "#CD534CFF")
ggplot(embarkedStruct, aes(x = "", y = embarkedPercentages, fill = embarked)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = pos, label = embarkedPercentages), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
#EMBARKED - 2 missing values -> skipping NA
#freq
embarkedStruct <- count(workingData, 'embarked')
embarkedPercentages <- c()
for (row in 1:length(c(embarkedStruct$embarked))) {
embarkedPercentages <- append(embarkedPercentages,round((embarkedStruct$freq[row]/sum(embarkedStruct$freq))*100,digits=2))
}
embarkedStruct$percentages <- as.data.frame(embarkedPercentages)
embarkedStruct <- embarkedStruct %>%
arrange(desc(embarked)) %>%
mutate(pos = round(cumsum(embarkedPercentages) - 0.5*embarkedPercentages, digits = 2))
embarkedStruct
embarkedStruct$embarked <- as.factor(embarkedStruct$embarked)
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF", "#868686FF")) +
theme_pubclean()
#EMBARKED - 2 missing values -> skipping NA
#freq
embarkedStruct <- count(workingData, 'embarked')
embarkedPercentages <- c()
for (row in 1:length(c(embarkedStruct$embarked))) {
embarkedPercentages <- append(embarkedPercentages,round((embarkedStruct$freq[row]/sum(embarkedStruct$freq))*100,digits=2))
}
embarkedStruct$percentages <- as.data.frame(embarkedPercentages)
embarkedStruct <- embarkedStruct %>%
arrange(desc(embarked)) %>%
mutate(pos = round(cumsum(embarkedPercentages) - 0.5*embarkedPercentages, digits = 2))
embarkedStruct
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF", "#868686FF")) +
theme_pubclean()
mycols <- c("#0073C2FF", "#EFC000FF", "#868686FF", "#CD534CFF")
ggplot(embarkedStruct, aes(x = "", y = embarkedPercentages, fill = embarked)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = pos, label = embarkedPercentages), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarkedPercentages)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF", "#868686FF")) +
theme_pubclean()
embarked
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF", "#868686FF")) +
theme_pubclean()
#bar graph for pclass
ggplot(workingData, aes(pclass)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF")) +
theme_pubclean()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarkedStruct$embarked)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF")) +
theme_pubclean()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarkedStruct$embarked)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF",'RED')) +
theme_pubclean()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarkedStruct$embarked)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF",'GREEN')) +
theme_pubclean()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF",'GREEN')) +
theme_pubclean()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked[1:3,1])) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF",'GREEN')) +
theme_pubclean()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked[1:3])) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF",'GREEN')) +
theme_pubclean()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked[1:3,])) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF",'GREEN')) +
theme_pubclean()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked[1:3)) +
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked[1:3])) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF",'GREEN')) +
theme_pubclean()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked[1,2,3,] )) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF",'GREEN')) +
theme_pubclean()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked[c(1:3)] )) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF",'GREEN')) +
theme_pubclean()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF",'GREEN')) +
theme_pubclean()
ggplot(embarkedStruct, aes(x = "", y = embarkedPercentages, fill = embarked)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = pos, label = embarkedPercentages), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
mycols <- c("#0073C2FF", "#EFC000FF", "#868686FF", "RED")
ggplot(embarkedStruct, aes(x = "", y = embarkedPercentages, fill = embarked)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = pos, label = embarkedPercentages), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(embarkedStruct, aes(x = "", y = embarkedPercentages, fill = embarked)) +
geom_bar(width = 2, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = pos, label = embarkedPercentages), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(embarkedStruct, aes(x = "", y = embarkedPercentages, fill = embarked)) +
geom_bar(width = 20, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = pos, label = embarkedPercentages), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(embarkedStruct, aes(x = "", y = embarkedPercentages, fill = embarked)) +
geom_bar(width = 1, stat = "identity", color = "red") +
coord_polar("y", start = 0)+
geom_text(aes(y = pos, label = embarkedPercentages), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(embarkedStruct, aes(x = "", y = embarkedPercentages, fill = embarked)) +
geom_bar(width = 1, stat = "identity", color = "black") +
coord_polar("y", start = 0)+
geom_text(aes(y = pos, label = embarkedPercentages), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
mycols <- c("#0073C2FF", "#EFC000FF", "#868686FF", "#0073C2FF")
ggplot(embarkedStruct, aes(x = "", y = embarkedPercentages, fill = embarked)) +
geom_bar(width = 1, stat = "identity", color = "black") +
coord_polar("y", start = 0)+
geom_text(aes(y = pos, label = embarkedPercentages), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
mycols <- c("#0073C2FF", "#EFC000FF", "#868686FF")
ggplot(embarkedStruct, aes(x = "", y = embarkedPercentages, fill = embarked)) +
geom_bar(width = 1, stat = "identity", color = "black") +
coord_polar("y", start = 0)+
geom_text(aes(y = pos, label = embarkedPercentages), color = "white")+
scale_fill_manual(values = mycols) +
theme_void()
#bar graph for pclass
ggplot(embarkedStruct, aes(embarked)) +
geom_bar(fill = c("#0073C2FF", "#EFC000FF", "#CD534CFF",'GREEN')) +
theme_pubclean()
#2 - frequencies, percentages for survived
#freq
survivedStruct <- count(workingData, 'survived')
View(survivedStruct)
survivedPercentages <- c()
for (row in 1:length(c(survivedStruct$survived))) {
survivedPercentages <- append(survivedPercentages,round((survivedStruct$freq[row]/sum(survivedStruct$freq))*100,digits=2))
}
survivedStruct$percentages <- as.data.frame(survivedPercentages)
#4 - descriptive statistics for age
summary(workingData$age)
hist(workingData$age)
hist(workingData$age,
main="Histogram of titanic passengers' age",
xlab="Age",
xlim=c(50,100),
col="red",
freq=TRUE
)
hist(workingData$age,
main="Histogram of titanic passengers' age",
xlab="Age",
xlim=c(50,100),
col="red",
freq=TRUE
)
hist(workingData$age,
main="Histogram of titanic passengers' age",
xlab="Age",
col="red",
freq=TRUE
)
hist(workingData$age,
main="Histogram of titanic passengers' age",
xlab="Age",
col="red",
freq=FALSE
)
TRUE
hist(workingData$age,
main="Histogram of titanic passengers' age",
xlab="Age",
col="red",
freq=TRUE
)
#4 - descriptive statistics for fare
summary(workingData$fare)
hist(workingData$fare,
main="Histogram of titanic passengers' age",
xlab="Age",
col="red",
freq=TRUE
)
hist(workingData$fare,
main="Histogram of titanic ticket prices",
xlab="Fare value",
col="red",
freq=TRUE
)
hist(workingData$fare,
main="Histogram of titanic ticket prices",
xlab="Fare value",
col="red",
freq=TRUE,
xlim=c(50,320)
)
hist(workingData$fare,
main="Histogram of titanic ticket prices",
xlab="Fare value",
col="red",
freq=TRUE,
xlim=c(0,320)
)
hist(workingData$age,
main="Histogram of titanic passengers' age",
xlab="Age",
col="red",
freq=TRUE
)
text(h$mids,h$counts,labels=h$counts, adj=c(0.5, -0.5))
text(h$mids,h$counts,labels=h$counts, adj=c(0.5, -0.5))
ageHist <- hist(workingData$age,
main="Histogram of titanic passengers' age",
xlab="Age",
col="red",
freq=TRUE
)
text(ageHist$mids,ageHist$counts,labels=ageHist$counts, adj=c(0.5, -0.5))
ageHist <- hist(workingData$age,
main="Histogram of titanic passengers' age",
xlab="Age",
ylab="Number of passengers"
col="red",
freq=TRUE
)
text(ageHist$mids,ageHist$counts,labels=ageHist$counts, adj=c(0.5, -0.5))
ageHist <- hist(workingData$age,
main="Histogram of titanic passengers' age",
xlab="Age",
ylab="Number of passengers",
col="red",
freq=TRUE
)
text(ageHist$mids,ageHist$counts,labels=ageHist$counts, adj=c(0.5, -0.5))
priceHist <- hist(workingData$fare,
main="Histogram of titanic ticket prices",
xlab="Fare value",
yLab="Number of tickets in specific price",
col="red",
freq=TRUE,
xlim=c(0,320)
)
text(priceHist$mids,priceHist$counts,labels=priceHist$counts, adj=c(0.5, -0.5))
priceHist <- hist(workingData$fare,
main="Histogram of titanic ticket prices",
xlab="Fare value",
yLab="Number of tickets in specific price",
col="red",
freq=TRUE,
xlim=c(0,300)
)
text(priceHist$mids,priceHist$counts,labels=priceHist$counts, adj=c(0.5, -0.5))
priceHist <- hist(workingData$fare,
main="Histogram of titanic ticket prices",
xlab="Fare value",
yLab="Number of tickets in specific price",
col="red",
freq=TRUE,
xlim=c(0,600)
)
priceHist <- hist(workingData$fare,
main="Histogram of titanic ticket prices",
xlab="Fare value",
yLab="Number of tickets in specific price",
col="red",
freq=TRUE,
xlim=c(0,520)
)
text(priceHist$mids,priceHist$counts,labels=priceHist$counts, adj=c(0.5, -0.5))
attach(mtcars)
plot(workingData$age, workingData$fare, main="Age vs Price",
xlab="Age ", ylab="Price for ticket", pch=19)
attach(mtcars)
plot(workingData$age, workingData$fare, main="Age vs Price",
xlab="Age ", ylab="Price for ticket", pch=19)
attach(mtcars)
plot(workingData$age, workingData$fare, main="Age vs Price",
xlab="Age ", ylab="Price for ticket", pch=19, col='RED')
plot(workingData$age, workingData$fare, main="Age vs Price",
xlab="Age ", ylab="Price for ticket", pch=19, col='blue')
abline(lm(workingData$fare~workingData$age), col="red")
cor.test(workingData$age, workingData$fare, method="pearson")
#6 spliting for training and test set with seed
#ommiting rows with NA values in dataset
fullDataset <- na.omit(workingData)
require(caTools)
set.seed(123)
sample = sample.split(fullDataset,SplitRatio = 0.70)
train1 =subset(fullDataset,sample ==TRUE)
trainingSet =subset(fullDataset,sample ==TRUE)
testSet=subset(fullDataset, sample==FALSE)
#freq
testSetSurvivedStruct <- count(trainingSet, 'survived')
testSetSurvivedPercentages <- c()
for (row in 1:length(c(testSetSurvivedStruct$survived))) {
testSetSurvivedPercentages <- append(testSetSurvivedPercentages,round((testSetSurvivedStruct$freq[row]/sum(testSetSurvivedStruct$freq))*100,digits=2))
}
testSetSurvivedStruct$percentages <- as.data.frame(testSetSurvivedPercentages)
View(testSetSurvivedStruct)
#freq
testSetSurvivedStruct <- count(testSet, 'survived')
testSetSurvivedPercentages <- c()
for (row in 1:length(c(testSetSurvivedStruct$survived))) {
testSetSurvivedPercentages <- append(testSetSurvivedPercentages,round((testSetSurvivedStruct$freq[row]/sum(testSetSurvivedStruct$freq))*100,digits=2))
}
testSetSurvivedStruct$percentages <- as.data.frame(testSetSurvivedPercentages)
View(testSetSurvivedStruct)
#freq
trainingSetSurvivedStruct <- count(trainingSet, 'survived')
trainingSetSurvivedPercentages <- c()
for (row in 1:length(c(trainingSetSurvivedStruct$survived))) {
trainingSetSurvivedPercentages <- append(trainingSetSurvivedPercentages,round((trainingSetSurvivedStruct$freq[row]/sum(trainingSetSurvivedStruct$freq))*100,digits=2))
}
trainingSetSurvivedStruct$percentages <- as.data.frame(trainingSetSurvivedPercentages)
View(trainingSetSurvivedStruct)
#BACK TO 6 -> spliting without ommitin NA rows
set.seed(123)
sampleProper = sampleProper.split(workingData,SplitRatio = 0.70)
#BACK TO 6 -> spliting without ommitin NA rows
set.seed(123)
sampleProper = sample.split(workingData,SplitRatio = 0.70)
trainingSetProper =subset(workingData,sampleProper ==TRUE) #180 observations
testSetProper =subset(workingData, sampleProper==FALSE) #90 observations
summary(workingData$age)
View(trainingSetProper)
trainingSetProper[trainingSetProper$embarked == "NA"] <- "S"
trainingSetProper[trainingSetProper$embarked == "NA"] <- as.factor("S")
trainingSetProper$embarked[is.na(trainingSetProper$embarked)] <- "S"
testSetProper$embarked[is.na(testSetProper$embarked)] <- "S"
#9 -> before replacing duplicating datasets for A and B points
trainingSetProperA <- trainingSetProper
trainingSetProperB <- trainingSetProper
testSetProperA <- testSetProper
testSetProperB <- testSetProper
View(trainingSetProperA)
#simple replace with mean for training and test set for Age values
trainingSetProperA$age[is.na(trainingSetProperA$age)] <- 29.8810
View(testSetProperA)
testSetProperA$age[is.na(testSetProperA$age)] <- 29.8810
#9+10 B
#USING HMISC IMPUTATION METHOD
install.packages("Hmisc")
library(Hmisc)
##impute with mean value
head(trainingSetProperB$age, n=15)
##impute with mean value
head(trainingSetProperB$age, n=15:30)
##impute with mean value
head(trainingSetProperB$age, n=30)
#add new column with imputed values
trainingSetProperB$imputed_age <- with(trainingSetProperB, impute(age,mean))
#check where it was imputed compare original with imputed in dataset
head(trainingSetProperB$imputed_age, n=15)
#check where it was imputed compare original with imputed in dataset
head(trainingSetProperB$imputed_age, n=30)
#add new column with imputed values
trainingSetProperB$imputed_ageMedian <- with(trainingSetProperB, impute(age,median))
#check where it was imputed compare original with imputed in dataset
head(trainingSetProperB$imputed_ageMedian, n=30)
trainingSetProperB <- trainingSetProper
testSetProperB <- testSetProper
#TRAINING SET
#preview for some NA values
head(trainingSetProperB$age, n=30)
#add new column with imputed values
trainingSetProperB$imputed_age <- with(trainingSetProperB, impute(age,median))
#check where it was imputed compare original with imputed in dataset
head(trainingSetProperB$imputed_age, n=30)
#TEST SET
#preview for some NA values
head(testSetProperB$age, n=30)
#add new column with imputed values
testSetProperB$imputed_age <- with(testSetProperB, impute(age,median))
#check where it was imputed compare original with imputed in dataset
head(testSetProperB$imputed_age, n=30)
modelGLM <- glm(Survived ~.,family=binomial(link='logit'),data=trainingSetProperA)
modelGLM <- glm(survived ~.,family=binomial(link='logit'),data=trainingSetProperA)
modelGLM <- glm(survived ~.,family=binomial(link='logit'),data=trainingSetProperA)
modelGLM <- glm(survived ~ sex, pclass, age, cabin,family=binomial(link='logit'),data=trainingSetProperA)
modelGLM <- glm(survived ~ sex, pclass, age,family=binomial(link='logit'),data=trainingSetProperA)
summary(modelGLM)
modelGLM <- glm(survived ~ trainingSetProperA['age','sex','pclass'],family=binomial(link='logit'),data=trainingSetProperA)
selectedDatasetA <- trainingSetProperA %>% select('age','sex','pclass')
#11 Setting Generalized Linear Model for Logit Regression with LOGIT link function
install.packages("tidyverse")
library(tidyverse)
selectedDatasetA <- trainingSetProperA %>% select('age','sex','pclass')
View(selectedDatasetA)
selectedDatasetA <- trainingSetProperA %>% select('age','sex','pclass','survived')
View(selectedDatasetA)
modelGLM <- glm(survived ~ .,family=binomial(link='logit'),data=selectedDatasetA)
summary(modelGLM)
selectedDatasetA <- trainingSetProperA %>% select('age','sex','pclass','embarked','survived')
modelGLM <- glm(survived ~ .,family=binomial(link='logit'),data=selectedDatasetA)
summary(modelGLM)
library(pscl)
#significant factors - sex, pclass, age
install.packages("pscl")
library(pscl)
pR2(modelGLM)
selectedTestDatasetA <- testSetProperA %>% select('age','sex','pclass','embarked','survived')
#measuring accuracy with test set
fitted.results <- predict(modelGLM,selectedTestDatasetA)
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != selectedTestDatasetA$survived)
print(paste('Accuracy',1-misClasificError))
write.csv(selectedDatasetA, "trainingDatasetA")
write.csv(selectedDatasetA, "trainingDatasetA", )
setwd("~/Downloads/titanicData")
write.csv(selectedDatasetA, "trainingDatasetA", )
ageHist <- hist(workingData$age,
main="Histogram of titanic passengers' age",
xlab="Age",
ylab="Number of passengers",
col="red",
freq=TRUE
)
text(ageHist$mids,ageHist$counts,labels=ageHist$counts, adj=c(0.5, -0.5))
priceHist <- hist(workingData$fare,
main="Histogram of titanic ticket prices",
xlab="Fare value",
yLab="Number of tickets in specific price",
col="red",
freq=TRUE,
xlim=c(0,520)
)
text(priceHist$mids,priceHist$counts,labels=priceHist$counts, adj=c(0.5, -0.5))
attach(mtcars)
plot(workingData$age, workingData$fare, main="Age vs Price",
xlab="Age ", ylab="Price for ticket", pch=19, col='blue')
abline(lm(workingData$fare~workingData$age), col="red")
cor.test(workingData$age, workingData$fare, method="pearson")
#replacing pclass for factors
selectedDatasetA$pclass[selectedDatasetA$pclass == 1] <- "first"
selectedDatasetA$pclass[selectedDatasetA$pclass == 2] <- "second"
selectedDatasetA$pclass[selectedDatasetA$pclass == 3] <- "third"
write.csv(selectedDatasetA, "trainingDatasetA", )
modelGLM <- glm(survived ~ .,family=binomial(link='logit'),data=selectedDatasetA)
summary(modelGLM)
View(selectedDatasetA)
selectedDatasetA$survived <- ifelse(test = selectedDatasetA$survived == 0, yes="survived", no="not survived")
modelGLM <- glm(survived ~ .,family=binomial(link='logit'),data=selectedDatasetA)
summary(modelGLM)
#details of logistic regression
summary(modelGLM)
install.packages("pscl")
modelGLM <- glm(survived ~ .,family=binomial,data=selectedDatasetA)
modelGLM <- glm(survived ~ .,family=binomial(link='logit'),data=selectedDatasetA)
#details of logistic regression
summary(modelGLM)
modelGLM <- glm(survived ~ .,family=binomial(link='logit'),data=selectedDatasetA)
selectedDatasetA$survived <- ifelse(test = selectedDatasetA$survived == 0, yes="survived", no="not survived")
modelGLM <- glm(survived ~ .,family=binomial(link='logit'),data=selectedDatasetA)
selectedDatasetA <- trainingSetProperA %>% select('age','sex','pclass','embarked','survived')
selectedTestDatasetA <- testSetProperA %>% select('age','sex','pclass','embarked','survived')
library(tidyverse)
selectedDatasetA <- trainingSetProperA %>% select('age','sex','pclass','embarked','survived')
selectedTestDatasetA <- testSetProperA %>% select('age','sex','pclass','embarked','survived')
#replacing pclass for factors
selectedDatasetA$pclass[selectedDatasetA$pclass == 1] <- "first"
selectedDatasetA$pclass[selectedDatasetA$pclass == 2] <- "second"
selectedDatasetA$pclass[selectedDatasetA$pclass == 3] <- "third"
modelGLM <- glm(survived ~ .,family=binomial(link='logit'),data=selectedDatasetA)
#details of logistic regression
summary(modelGLM)
modelGLM <- glm(survived ~ .,family=binomial,data=selectedDatasetA)
#details of logistic regression
summary(modelGLM)
modelGLM <- glm(survived ~ .,family=binomial(link='logit'),data=selectedDatasetA)
#details of logistic regression
summary(modelGLM)
